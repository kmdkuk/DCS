#-*- coding: itf-8 -*-
# DCS Lab2 Read Me First
#
# Ei-Ichi Osawa
#


[ファイルの説明]

このディレクトリには以下のファイルが含まれている．

1. READ_ME_FIRST: このファイル自身．このディレクトリに含まれているファ
	イルの使い方に関する説明．

2. master.c: main関数を含む繰り返し囚人のジレンマゲームの管理プログラム．
	ファイルの先頭の方で #define DEBUG としておくと，ゲームの途中
	経過に関するいろいろな情報が出力される．具他的には master.c を
	読めばわかる．

	このプログラムとリンクしてコンパイルされたオブジェクト(実行可
	能形式，ロードモジュール)は，起動時にコマンドラインで以下のオ
	プションを受け付ける．仮に生成したオブジェクト名を run とする．

	%run [-s maxGameStep] 

	(オプションの説明)

	-s	ゲームの繰り返し回数
		このオプション指示子の後に与えられた10,000以下の正の整
	        数をゲームの繰り返し回数にセットする．オプションが与え
		られなかった場合は，ディフォルトで200回に設定する．

3. player1.o: Player1関数を含むプレイヤプログラムのオブジェクト(リロ
	ケータブルモジュール)．以下では「テスト用player1.o」と呼ぶ．

4. player2.o: Player2関数を含むプレイヤプログラムのオブジェクト(リロ
        ケータブルモジュール)．以下では「テスト用player2.o」と呼ぶ．

[ファイルの使い方]

自分で作成した player1.c とゲーム管理プログラムmaster.c および テスト
用player2.o をコンパイルして，例えば run という名前のオブジェクト(実行
可能形式)を生成したい場合は以下のようにする．ファイルの順番は任意である．

%gcc -o run /FUN/Work/DCS/2017/resource/2/master.c  player1.c /FUN/Work/DCS/2017/resource/2/player2.o 

テスト用プログラムのオブジェクトを自分のディレクトリにコピーしても 
よい．その場合は，上記の例で絶対パスの指定をはずせばよい．

さらに，自分の作成した master.c  および player1.c とテスト用の 
player2.o  をコンパイルして run という名前のオブジェクト(実行可能形式)
を生成したい場合は以下のようにする．同様にファイルの順番は任意である． 

%gcc -o run master.c  player1.c /FUN/Work/DCS/2017/resource/2/player2.o

(以上)

